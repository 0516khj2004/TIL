{"version":3,"sources":["components/TodoListTemplate.js","actions/index.js","components/Form.js","components/TodoItem.js","components/TodoItemList.js","App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["TodoListTemplate","form","children","className","process","apiUrl","Form","state","todo","handleChange","e","setState","target","value","handleCreate","props","addTodo","text","checked","handleKeyPress","key","this","onChange","onKeyPress","onClick","Component","connect","dispatch","axios","post","then","res","type","payload","data","catch","err","console","error","TodoItem","handelRemove","id","removeTodo","handleToggle","toggleTodo","nextProps","nextState","todoText","stopPropagation","delete","put","TodoItemList","fetchAllTodos","todos","todoList","map","get","App","Boolean","window","location","hostname","match","initalState","store","createStore","action","Object","assign","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"oTAmBeA,G,MAhBU,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,SAC7B,OACI,0BAAMC,UAAU,sBACZ,yBAAKA,UAAU,SAAf,8BACYC,2BADZ,KAGA,6BAASD,UAAU,gBACdF,GAEL,6BAASE,UAAU,iBACdD,M,+BCHXG,EAASD,8BCLTE,E,4MAGFC,MAAQ,CACJC,KAAK,I,EAITC,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVH,KAAME,EAAEE,OAAOC,S,EAIvBC,aAAe,WAAO,IACXN,EAAQ,EAAKD,MAAbC,KAEN,EAAKO,MAAMC,QAAQ,CAChBC,KAAOT,EACPU,SAAU,IAEd,EAAKP,SAAS,CAACH,KAAO,M,EAG1BW,eAAiB,SAACT,GACD,UAAVA,EAAEU,KACD,EAAKN,gB,uDAKH,IACCN,EAAQa,KAAKd,MAAbC,KACAC,EAA8CY,KAA9CZ,aAAcK,EAAgCO,KAAhCP,aAAcK,EAAkBE,KAAlBF,eACnC,OACI,yBAAKhB,UAAU,QACX,2BAAOU,MAAOL,EAAMc,SAAUb,EAAcc,WAAYJ,IACxD,yBAAKhB,UAAU,gBAAgBqB,QAASV,GAAxC,qB,GArCGW,aA6CJC,cAAQ,KAAK,CAACV,QDrBN,SAACR,GACpB,OAAM,SAACmB,GACHC,IAAMC,KAAKxB,EAAOG,GACbsB,MAAK,SAAAC,GACFJ,EAAS,CACLK,KA9BM,YA+BNC,QAASF,EAAIG,UAGpBC,OAAM,SAAAC,GAEH,MADAC,QAAQC,MAAMF,GACPA,QCURV,CAAwBpB,GC7CjCiC,G,kNACFC,aAAe,SAACC,GACZ,EAAK1B,MAAM2B,WAAWD,I,EAE1BE,aAAc,SAACnC,GACX,EAAKO,MAAM6B,WAAWpC,I,oEAIJqC,EAAWC,GAC7B,OAAOzB,KAAKN,MAAMG,UAAY2B,EAAU3B,U,+BAGlC,IAAD,SAC4BG,KAAKN,MAA9BgC,EADH,EACGA,SAAU7B,EADb,EACaA,QAASuB,EADtB,EACsBA,GAC3B,OACI,yBAAKtC,UAAU,YAAYqB,QAAS,WAChC,IAAMhB,EAAM,CAAEiC,KAAIxB,KAAO8B,EAAU7B,WACnCV,EAAKU,SAAUV,EAAKU,QACpB,EAAKyB,aAAanC,KAElB,yBAAKL,UAAU,SAASqB,QAAS,SAACd,GAE9BA,EAAEsC,kBACF,EAAKR,aAAaC,KAHtB,QAOA,yBAAKtC,UAAS,oBAAee,GAAW,YACpC,6BAAM6B,IAGN7B,GAAY,yBAAKf,UAAU,cAAf,e,GAhCTsB,cAuCRC,cAAQ,KAAM,CAACgB,WFEJ,SAAAD,GACtB,OAAM,SAACd,GACHC,IAAMqB,OAAN,UAAgB5C,EAAhB,YAA0BoC,IACrBX,MAAK,SAAAC,GACFJ,EAAS,CACLK,KA9CS,eA+CTC,QAASF,EAAIG,UAGpBC,OAAM,SAAAC,GAEH,MADAC,QAAQC,MAAMF,GACPA,OEbmBQ,WFkBhB,SAACpC,GACvB,OAAM,SAACmB,GACHC,IAAMsB,IAAN,UAAa7C,EAAb,YAAuBG,EAAKiC,IAAMjC,GAC7BsB,MAAK,SAAAC,GACFJ,EAAS,CACLK,KA7DS,eA8DTC,QAASF,EAAIG,UAGpBC,OAAM,SAAAC,GAEH,MADAC,QAAQC,MAAMF,GACPA,QE7BRV,CAAwCa,GCvCjDY,E,kLAGE9B,KAAKN,MAAMqC,kB,4CAIOP,EAAWC,GAC7B,OAAOzB,KAAKN,MAAMsC,QAAUR,EAAUQ,Q,+BAGhC,IAEAC,EADUjC,KAAKN,MAAdsC,MACgBE,KACnB,gBAAEd,EAAF,EAAEA,GAAIxB,EAAN,EAAMA,KAAMC,EAAZ,EAAYA,QAAZ,OACI,kBAAC,EAAD,CACAuB,GAAIA,EACJM,SAAU9B,EACVC,QAAWA,EACXE,IAAKqB,OAKb,OACI,6BACKa,O,GA1BU7B,aAqCZC,eALQ,SAAAnB,GACnB,MAAO,CACH8C,MAAQ9C,EAAM8C,SAGkB,CAAED,cH7Bb,WACzB,OAAM,SAACzB,GACHC,IAAM4B,IAAInD,GACLyB,MAAK,SAAAC,GACFJ,EAAS,CACLK,KAfQ,cAgBRC,QAASF,EAAIG,UAGpBC,OAAM,SAAAC,GAEH,MADAC,QAAQC,MAAMF,GACPA,QGkBRV,CAA2CyB,GCxB3CM,E,uKAPP,OACI,kBAAC,EAAD,CAAkBxD,KAAM,kBAAC,EAAD,OACrB,kBAAC,EAAD,W,GAJGwB,aCGEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WChBAC,EAAc,CAChBV,MAAO,CACH,CACIZ,GAAK,EACLxB,KAAO,GACPC,SAAU,K,gBCIhB8C,EAAQC,uBDEY,WAAkC,IAAjC1D,EAAgC,uDAAxBwD,EAAaG,EAAW,uCACvD,OAAOA,EAAOlC,MACV,INZoB,cMapB,INZkB,YMalB,INZqB,eMarB,INZqB,eMajB,OAAOmC,OAAOC,OAAO,GAAI7D,EAAO,CAAC8C,MAAOa,EAAOjC,UACnD,QACI,OAAO1B,KCVkB8D,8BAAoBC,0BAAgBC,OACzEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUV,MAAOA,GACf,kBAAC,EAAD,QAGJW,SAASC,eAAe,SFiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjD,MAAK,SAAAkD,GACJA,EAAaC,gBAEd9C,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAM4C,c","file":"static/js/main.8b8a805e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TodoListTemplate.css';\r\n\r\nconst TodoListTemplate = ({form, children}) => {\r\n    return (\r\n        <main className=\"todo-list-template\">\r\n            <div className=\"title\">\r\n                오늘 할일 ({process.env.REACT_APP_TITLE})\r\n            </div>\r\n            <section className=\"form-wrapper\">\r\n                {form}\r\n            </section>\r\n            <section className=\"todos-wrapper\">\r\n                {children}\r\n            </section>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default TodoListTemplate;","import axios from \"axios\";\r\n\r\n//Action 타입 변수\r\nexport const FETCH_TODOS =  \"FETCH_TODOS\";\r\nexport const ADD_TODOS =  \"ADD_TODOS\";\r\nexport const REMOVE_TODOS =  \"REMOVE_TODOS\";\r\nexport const TOGGLE_TODOS =  \"TOGGLE_TODOS\";\r\n\r\n\r\n//server URL \r\nconst apiUrl = process.env.REACT_APP_APIURL;\r\n\r\n//todo목록 \r\nexport const fetchAllTodos = () => {\r\n    return(dispatch) => {\r\n        axios.get(apiUrl)\r\n            .then(res => {\r\n                dispatch({\r\n                    type: FETCH_TODOS,\r\n                    payload: res.data\r\n            })\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n                throw (err);\r\n            })\r\n    }\r\n}\r\n//todo 등록 \r\nexport const addTodo = (todo) => {\r\n    return(dispatch) => {\r\n        axios.post(apiUrl,todo)\r\n            .then(res => {\r\n                dispatch({\r\n                    type: ADD_TODOS,\r\n                    payload: res.data\r\n            })\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n                throw (err);\r\n            })\r\n    }\r\n}\r\n\r\n//todo 삭제\r\nexport const removeTodo = id => {\r\n    return(dispatch) => {\r\n        axios.delete(`${apiUrl}/${id}`)\r\n            .then(res => {\r\n                dispatch({\r\n                    type: REMOVE_TODOS,\r\n                    payload: res.data\r\n            })\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n                throw (err);\r\n            })\r\n    }\r\n}\r\n//toggle\r\nexport const toggleTodo = (todo) => {\r\n    return(dispatch) => {\r\n        axios.put(`${apiUrl}/${todo.id}`, todo)\r\n            .then(res => {\r\n                dispatch({\r\n                    type: TOGGLE_TODOS,\r\n                    payload: res.data\r\n            })\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n                throw (err);\r\n            })\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport './Form.css';\r\nimport { connect } from 'react-redux';\r\nimport { addTodo} from '../actions';\r\n\r\nclass Form extends Component {\r\n    \r\n    //상태변수\r\n    state = {\r\n        todo:'',\r\n    }\r\n\r\n    //Event Handler 함수 정의\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            todo: e.target.value\r\n        });\r\n    };\r\n\r\n    handleCreate = () => {\r\n        const {todo} = this.state;\r\n\r\n         this.props.addTodo({\r\n            text : todo,\r\n            checked : false,\r\n        });\r\n        this.setState({todo : ''});\r\n    };\r\n\r\n    handleKeyPress = (e) => {\r\n        if(e.key === 'Enter'){\r\n            this.handleCreate();\r\n        }\r\n    };\r\n\r\n\r\n    render() {\r\n        const {todo} = this.state;\r\n        const {handleChange, handleCreate, handleKeyPress} = this;\r\n        return (\r\n            <div className=\"form\">\r\n                <input value={todo} onChange={handleChange} onKeyPress={handleKeyPress} />\r\n                <div className=\"create-button\" onClick={handleCreate} >\r\n                    추가\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null,{addTodo})(Form);","import React, { Component } from 'react';\r\nimport './TodoItem.css';\r\nimport {removeTodo, toggleTodo} from '../actions'\r\nimport { connect } from 'react-redux';\r\n\r\nclass TodoItem extends Component {\r\n    handelRemove = (id) =>{\r\n        this.props.removeTodo(id); //action함수에 있는 remove함수 call \r\n    };\r\n    handleToggle= (todo) => {\r\n        this.props.toggleTodo(todo);\r\n    }\r\n        \r\n    //render() 메서드의 호출을 줄 일 수 있다.\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return this.props.checked !== nextProps.checked;\r\n        }\r\n\r\n    render() {\r\n        const { todoText, checked, id} = this.props;\r\n        return (\r\n            <div className=\"todo-item\" onClick={() => {\r\n                const todo= { id, text : todoText, checked };\r\n                todo.checked= !todo.checked;\r\n                this.handleToggle(todo)\r\n                }}>\r\n                <div className=\"remove\" onClick={(e) => {\r\n                    //버플업(이벤트가 전파) 방지\r\n                    e.stopPropagation();\r\n                    this.handelRemove(id)\r\n                }}>\r\n                    &times;\r\n                </div>\r\n                <div className={`todo-text ${checked && 'checked'}`}>\r\n                    <div>{todoText}</div>\r\n                </div>\r\n                {\r\n                    checked && (<div className=\"check-mark\">✓</div>)\r\n                    }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, {removeTodo, toggleTodo})(TodoItem);","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport { connect } from 'react-redux';\r\nimport { fetchAllTodos } from '../actions';\r\n\r\nclass TodoItemList extends Component {\r\n    //lifd-cycle 메서드 : 화면 load할 때 마다\r\n    componentDidMount() {\r\n        this.props.fetchAllTodos();\r\n    }\r\n    \r\n    //life-cycle 메서드 overriding : render() 메서드의 호출을 줄 일 수 있다.\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return this.props.todos !== nextProps.todos;\r\n        }\r\n\r\n    render() {\r\n        const {todos} = this.props;\r\n        const todoList = todos.map(\r\n            ({id, text, checked}) =>(\r\n                <TodoItem \r\n                id={id}\r\n                todoText={text}\r\n                checked = {checked}\r\n                key={id}\r\n                />\r\n            )\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                {todoList}        \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps =state => {\r\n    return {\r\n        todos : state.todos\r\n    }\r\n}\r\nexport default connect(mapStateToProps, { fetchAllTodos})(TodoItemList);","import React, { Component } from 'react';\r\nimport TodoListTemplate from './components/TodoListTemplate';\r\nimport Form from './components/Form';\r\nimport TodoItemList from './components/TodoItemList';\r\n\r\n// const initialTodos = new Array(500).fill(0).map(\r\n//     (item, idx) => ({ id: idx, text: `일정 ${idx}`, checked: true })\r\n//     )\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <TodoListTemplate form={<Form />}>\r\n               <TodoItemList />\r\n            </TodoListTemplate>\r\n        );\r\n    }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { FETCH_TODOS, ADD_TODOS, REMOVE_TODOS, TOGGLE_TODOS } from \"../actions\"\r\n\r\nconst initalState = {\r\n    todos: [\r\n        {\r\n            id : 0, \r\n            text : '',\r\n            checked : false\r\n        }\r\n    ]\r\n}\r\n\r\n//reducer 함수 \r\nexport const toDoReucer = (state = initalState, action) => {\r\n    switch(action.type){\r\n        case FETCH_TODOS:\r\n        case ADD_TODOS:\r\n        case REMOVE_TODOS:\r\n        case TOGGLE_TODOS:\r\n            return Object.assign({}, state, {todos: action.payload});\r\n        default:\r\n            return state\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux';\nimport { toDoReucer } from './reducers';\nimport thunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\nimport {composeWithDevTools} from 'redux-devtools-extension'\n\nconst store = createStore(toDoReucer,composeWithDevTools(applyMiddleware(thunk)));\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}